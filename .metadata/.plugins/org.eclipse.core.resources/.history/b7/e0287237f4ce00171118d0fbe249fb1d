«IMPORT model»

«EXTENSION template::GeneratorExtensions»
    	
«DEFINE documentRoot FOR DocumentRoot»
«FILE "test.py"»

def registerForm(self, root, port):
	i = 0
	self.registerFrame = Frame(root, bd=1, relief=RIDGE, width = 550)
	self.registerFrame.pack(side=TOP, fill = BOTH, padx=5, pady=10)
	self.registerFrame.pack_forget()
	«EXPAND RegisterGroupBoxAddAsChildern FOR this.component»
    «EXPAND ControlsProperties FOR this.component»
    «EXPAND readMethodComponent FOR this.component»
def ReadAll(self):
    «EXPAND readAllMethodComponent FOR this.component»
«ENDFILE»
«ENDDEFINE»

«DEFINE readAllMethodComponent FOR Component»
	«EXPAND readAllMethodRegMem FOREACH this.regMemSet»
«ENDDEFINE»

«DEFINE readAllMethodRegMem FOR RegMemSet»
	«EXPAND readAllMethodRegister FOREACH this.regMemElement»
«ENDDEFINE»

«DEFINE readAllMethodRegister FOR RegMemElement»
«ENDDEFINE»

«DEFINE readAllMethodRegister FOR Register»
	«EXPAND readAllMethodBitfield FOREACH this.bitFieldElement»
«ENDDEFINE»

«DEFINE readAllMethodBitfield FOR BitFieldElement»
«ENDDEFINE»

«DEFINE readAllMethodBitfield FOR BitField»
	self.«this.name»Read()
«ENDDEFINE»

«DEFINE readMethodComponent FOR Component»
	«EXPAND readMethodRegMem FOREACH this.regMemSet»
«ENDDEFINE»

«DEFINE readMethodRegMem FOR RegMemSet»
	«EXPAND readMethodRegister FOREACH this.regMemElement»
«ENDDEFINE»

«DEFINE readMethodRegister FOR RegMemElement»
«ENDDEFINE»

«DEFINE readMethodRegister FOR Register»
	«EXPAND readMethodBitfield FOREACH this.bitFieldElement»
«ENDDEFINE»

«DEFINE readMethodBitfield FOR BitFieldElement»
«ENDDEFINE»

«DEFINE readMethodBitfield FOR BitField»
«IF this.accessExternal.accessType.toString() == 'readwrite'»
   «IF this.width == "1"»
def «this.name»Read(self):
	nobytes = self.«this.name»nobytes
	if self.send_read_command(self.«this.name»regAddress, nobytes, True)==0:
    	self.«this.name»CheckButton.deselect()
	else:
    	self.«this.name»CheckButton.select()
	«ELSE»
def «this.name»Read(self):
	nobytes = self.«this.name»nobytes
	self.«this.name»Spinbox.delete(0, END)
	self.«this.name»Spinbox.insert(END, self.send_read_command(self.«this.name»regAddress, nobytes, True))
	«ENDIF»
«ENDIF»

«IF this.accessExternal.accessType.toString() == 'read'»
def «this.name»Read(self):
	nobytes = self.«this.name»nobytes
    self.«this.name»Entry.delete(0, END)
    self.«this.name»Entry.insert(END, self.send_read_command(self.«this.name»regAddress, nobytes, True))
«ENDIF»
«ENDDEFINE»

«DEFINE ControlsProperties FOR Component»
	«EXPAND RegMemControlsProperties FOREACH this.regMemSet»
«ENDDEFINE»

«DEFINE RegMemControlsProperties FOR RegMemSet»
	«EXPAND RegisterControlsProperties FOREACH this.regMemElement»
«ENDDEFINE»

«DEFINE RegisterControlsProperties FOR RegMemElement»
«ENDDEFINE»

«DEFINE RegisterControlsProperties FOR Register»
	«IF this.name != "ld5_ctrl" && this.name != "ld6_ctrl" && this.name != "ld7_ctrl"»
	parent = «this.name»Frame
	«this.name»RegLabel = Label(parent, text = "«this.name»")
	«this.name»RegLabel.pack(side = TOP)
	«ENDIF»
	«FOREACH this.bitFieldElement AS bit»
	self.«bit.name»nobytes = int(ceil(«this.dataWidth»/8))
	self.«bit.name»regAddress = «this.offset»
	«ENDFOREACH»
	«EXPAND BitFieldControlsAsChildren FOREACH this.bitFieldElement»
«ENDDEFINE»

«DEFINE BitFieldControlsAsChildren FOR BitFieldElement»
«ENDDEFINE»

«DEFINE BitFieldControlsAsChildren FOR BitField»
«IF this.accessExternal.accessType.toString() == 'readwrite'»
   «IF this.width == "1"»
	def «this.name»CheckEventHandler():
		nobytes = 1
		valueAsByteArray = []
		value = int(self.«this.name»is_checked.get())
		for i in range(nobytes):
			valueAsByteArray.append(value % 256)
			value = int(value / 256)
		self.send_write_command(self.«this.name»regAddress, valueAsByteArray)
	self.«this.name»is_checked = IntVar()
	«IF this.name == "ld5_ctrl" || this.name == "ld6_ctrl" || this.name == "ld7_ctrl"»
	self.«this.name»CheckButton = Checkbutton(ld4_ctrlFrame, text = "«this.name»", width = 20, command=«this.name»CheckEventHandler, variable=self.«this.name»is_checked)
	«ELSE»
	self.«this.name»CheckButton = Checkbutton(parent, text = "«this.name»", width = 20, command=«this.name»CheckEventHandler, variable=self.«this.name»is_checked)
	«ENDIF»
	self.«this.name»CheckButton.pack(side = TOP)
	«ELSE»
	«this.name»BitFieldFrame = Frame(parent)
	«this.name»BitFieldFrame.pack(side = TOP)
	def «this.name»SpinboxEventHandler(event=None):
		nobytes = self.«this.name»nobytes
		valueAsByteArray = []
		value = int(self.«this.name»Spinbox.get())
		for i in range(nobytes):
			valueAsByteArray.append(value % 256)
			value = int(value / 256)
		self.send_write_command(self.«this.name»regAddress,valueAsByteArray)
	«this.name»Label = Label(«this.name»BitFieldFrame, text = "«this.name»", width = 15)
	«this.name»Label.pack(padx=5, pady=10, side=LEFT)
	self.«this.name»Spinbox = Spinbox(«this.name»BitFieldFrame, width = 8, from_=0, to=pow(2, «this.width»)-1, command = «this.name»SpinboxEventHandler)
	self.«this.name»Spinbox.pack(padx=5, pady=10, side=LEFT)
	self.«this.name»Spinbox.bind('<Return>', «this.name»SpinboxEventHandler)
     «ENDIF»
«ENDIF»

«IF this.accessExternal.accessType.toString() == 'read'»
	def «this.name»EntryClick(event):
		self.«this.name»Read();
	«this.name»BitFieldFrame = Frame(parent)
	«this.name»BitFieldFrame.pack(side = TOP)
	«this.name»Label = Label(«this.name»BitFieldFrame, text = "«this.name»", width = 15)
	«this.name»Label.pack(side = LEFT)
	self.«this.name»Entry = Entry(«this.name»BitFieldFrame, width = 10)
	self.«this.name»Entry.insert(END, "---")
	self.«this.name»Entry.pack(side = LEFT)
	self.«this.name»Entry.bind('<Button-1>', «this.name»EntryClick)
«ENDIF»

«ENDDEFINE»


«DEFINE RegisterGroupBoxAddAsChildern FOR Component»
	«EXPAND RegMemGroupBoxAddAsChildern FOREACH this.regMemSet»
«ENDDEFINE»

«DEFINE RegMemGroupBoxAddAsChildern FOR RegMemSet»
	«EXPAND RegisterGroupBoxAddAsChildern FOREACH this.regMemElement»
«ENDDEFINE»

«DEFINE RegisterGroupBoxAddAsChildern FOR RegMemElement»
«ENDDEFINE»

«DEFINE RegisterGroupBoxAddAsChildern FOR Register»
	«IF this.name != "ld5_ctrl" && this.name != "ld6_ctrl" && this.name != "ld7_ctrl"»
	«this.name»Frame = Frame(self.registerFrame, bd=1, relief=RIDGE, width = 200)
	«this.name»Frame.grid(row=i/4, column=i%4)
	i = i + 1
	«ENDIF»
«ENDDEFINE»
