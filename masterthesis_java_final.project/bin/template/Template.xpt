«IMPORT model»
    	
«DEFINE documentRoot FOR DocumentRoot»
«FILE "SWTViewer.java"»

import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;

import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.TooManyListenersException;

import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Spinner;
import org.eclipse.swt.widgets.TabFolder;
import swing2swt.layout.FlowLayout;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;

import gnu.io.CommPortIdentifier;
import gnu.io.PortInUseException;
import gnu.io.SerialPort;
import gnu.io.SerialPortEvent;
import gnu.io.SerialPortEventListener;
import gnu.io.UnsupportedCommOperationException;
import gnu.io.*;

import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.events.KeyAdapter;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.MouseAdapter;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.widgets.Text;

public class SWTViewer extends Composite implements SerialPortEventListener{
	
	/**
	 * Create the composite.
	 * @param parent
	 * @param style
	 */
    private Enumeration portList = CommPortIdentifier.getPortIdentifiers();
    private CommPortIdentifier portId;
    private OutputStream outputStream;
    private InputStream inputStream;
    private SerialPort serialPort;
	private String[] comListStringArr;
	private Group groupboxTmp;
	private Spinner spinner_3;
	private Spinner spinner_2;
	private Spinner spinner_1;
	private Spinner slave_spinner;
	private Combo combo_1;
	private byte[] readBuffer;
	private String readData = "";
	private TabFolder tabFolder;
	private TabItem tbtmNewItem;
	private TabItem panelItem;
	private Composite composite_1;
	private String logFile = "log.txt";
	«EXPAND ComponentControlsInitialization FOR this.component»
	public static void main(String[] args) {
	      Display myDisplay = new Display();
	      Shell myShell = new Shell(myDisplay);
	      myShell.setText("My Text Box");
	      myShell.setLayout(new FillLayout());
	      SWTViewer test = new SWTViewer(myShell, SWT.NONE);
	      myShell.open();
	       while (!myShell.isDisposed()) {
	         if (!myDisplay.readAndDispatch()) myDisplay.sleep();
	      }
	      test.close();
	      myDisplay.dispose();
	}
	public SWTViewer(Composite parent, int style) {
		super(parent, SWT.NONE);
		setLayout(null);
		
		Group grpConnect = new Group(this, SWT.NONE);
		grpConnect.setBounds(10, 10, 760, 59);
		grpConnect.setText("Connect");
		
		Label lblComPort = new Label(grpConnect, SWT.NONE);
		lblComPort.setBounds(11, 26, 55, 15);
		lblComPort.setText("COM Port");
		
		Combo combo = new Combo(grpConnect, SWT.NONE);
		comListStringArr = new String[getPortList().size()];
		int i=0;
		for(String s : getPortList()) {
			comListStringArr[i] = s;
			i++;
		}
			
		combo.setItems(comListStringArr);
		combo.setBounds(77, 22, 67, 23);
		combo.select(0);
		
		Button btnRefresh = new Button(grpConnect, SWT.NONE);
		btnRefresh.setBounds(155, 21, 75, 25);
		btnRefresh.setText("Refresh");
		
		Group group_1 = new Group(grpConnect, SWT.NONE);
		group_1.setBounds(240, 15, 499, 44);
		
		Label label_1 = new Label(group_1, SWT.NONE);
		label_1.setText("Protocol");
		label_1.setBounds(10, 14, 55, 15);
		
		combo_1 = new Combo(group_1, SWT.NONE);
		combo_1.setToolTipText("");
		combo_1.setItems(new String[] {"I2C", "SPI"});
		combo_1.setBounds(76, 10, 67, 23);
		combo_1.select(0);
		
		Group group_2 = new Group(group_1, SWT.NONE);
		group_2.setBounds(147, 0, 109, 35);
		
		Label label_2 = new Label(group_2, SWT.NONE);
		label_2.setText("Slave");
		label_2.setBounds(10, 14, 31, 15);
		
		slave_spinner = new Spinner(group_2, SWT.BORDER);
		slave_spinner.setMaximum(255);
		slave_spinner.setSelection(32);
		slave_spinner.setBounds(51, 10, 47, 22);
		
		Group group = new Group(group_1, SWT.NONE);
		group.setBounds(145, 0, 344, 40);
		
		Label label = new Label(group, SWT.NONE);
		label.setText("Channel");
		label.setBounds(113, 14, 55, 15);
		
		spinner_1 = new Spinner(group, SWT.BORDER);
		spinner_1.setMaximum(3);
		spinner_1.setSelection(3);
		spinner_1.setBounds(164, 10, 47, 22);
		
		Label label_3 = new Label(group, SWT.NONE);
		label_3.setText("Address");
		label_3.setBounds(223, 14, 55, 15);
		
		spinner_2 = new Spinner(group, SWT.BORDER);
		spinner_2.setMaximum(255);
		spinner_2.setSelection(32);
		spinner_2.setBounds(279, 10, 55, 22);
		
		Label label_4 = new Label(group, SWT.NONE);
		label_4.setText("Port");
		label_4.setBounds(10, 14, 31, 15);
		
		spinner_3 = new Spinner(group, SWT.BORDER);
		spinner_3.setMaximum(2);
		spinner_3.setMinimum(1);
		spinner_3.setSelection(2);
		spinner_3.setBounds(53, 10, 47, 22);
		
		tabFolder = new TabFolder(this, SWT.NONE);
		tabFolder.setBounds(20, 75, 772, 600);
		tabFolder.setVisible(false);
		
		tbtmNewItem = new TabItem(tabFolder, SWT.NONE);
		tbtmNewItem.setText("Control");
		
		panelItem = new TabItem(tabFolder, SWT.NONE);
		panelItem.setText("Panel");
		Composite composite = new Composite(tabFolder, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
		composite.setLayout(new GridLayout(3, false));
		panelItem.setControl(composite);
		
		composite_1 = new Composite(tabFolder, SWT.NONE);
		tbtmNewItem.setControl(composite_1);
		
		Group group_3 = new Group(composite_1, SWT.NONE);
		group_3.setBounds(91, 10, 501, 41);
		
		Button btnNewButton = new Button(group_3, SWT.NONE);
		btnNewButton.setBounds(46, 10, 150, 25);
		btnNewButton.setText("Read Sensor");
		btnNewButton.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseDown(MouseEvent e) {
				allSensorRead();
			}
		});
		
		Button btnNewButton_1 = new Button(group_3, SWT.NONE);
		btnNewButton_1.setBounds(321, 10, 135, 25);
		btnNewButton_1.setText("Execute Measurement");

		combo.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				CommportOpen(combo.getItem(combo.getSelectionIndex()));
				if(combo.getSelectionIndex() != 0) {
					group_1.setVisible(true);
					tabFolder.setVisible(true);
					if(combo_1.getItem(combo_1.getSelectionIndex()).equals("I2C")) {
						group.setVisible(true);
						group_2.setVisible(false);
					}
					else {
						group.setVisible(false);
						group_2.setVisible(true);
					}
				}
				else {
					group_1.setVisible(false);
					tabFolder.setVisible(false);
				}
			}
		});
		
		btnRefresh.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseDown(MouseEvent e) {
				group_1.setVisible(false);
				tabFolder.setVisible(false);
				close();
				combo.select(0);
			}
		});
	
		combo_1.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(combo_1.getItem(combo_1.getSelectionIndex()).equals("I2C")) {
					group.setVisible(true);
					group_2.setVisible(false);
				}
				else {
					group.setVisible(false);
					group_2.setVisible(true);
				}
			}
		});
		
		«EXPAND ComponentInitialization FOR this.component»

	}

	@Override
	protected void checkSubclass() {
		// Disable the check that prevents subclassing of SWT components
	}
	
	public String[] enumToStringArray(Class<? extends Enum<?>> e) {
	    return Arrays.toString(e.getEnumConstants()).replaceAll("^.|.$", "").split(", ");
	}
	
	public LinkedList<String> getPortList() {
    	LinkedList<String> comList = new LinkedList<>();
    	comList.add("off");
    	portList = CommPortIdentifier.getPortIdentifiers();
        while(portList.hasMoreElements()){
            portId = (CommPortIdentifier) portList.nextElement();
            comList.add(portId.getName());
        }
    	return comList;
    }

    public void close(){
        if(serialPort != null){
            serialPort.close();
        }
    }

    public void send(String sendData){
        if(serialPort != null){
            try{
                if(sendData.length() > 0){
                    outputStream.write(sendData.getBytes());
                }
            }catch (IOException e1){
            	e1.printStackTrace();
            }
            try {
			    FileWriter fw = new FileWriter("log.txt",true); //the true will append the new data
			    fw.write(sendData + "\n");//appends the string to the file
			    fw.close();
			}catch(Exception e) {
				e.printStackTrace();
			}
        }
    }

    public void CommportOpen(String comName){
    	if(comName.equals("off")) {
            if(serialPort != null)
                serialPort.close();
            }
        else {
        	portList = CommPortIdentifier.getPortIdentifiers();
            while(portList.hasMoreElements()){
          	  portId = (CommPortIdentifier) portList.nextElement();
          	  if(comName.equals(portId.getName())) {
          		  break;
          	  }
            }
              try{
                  if(serialPort != null)
                      serialPort.close();
                  serialPort = (SerialPort) portId.open("commreadapp", 2000);
                  try{
                      outputStream = serialPort.getOutputStream();
                      try{
                          inputStream = serialPort.getInputStream();
                          try{
                              serialPort.addEventListener(this);
                              serialPort.notifyOnDataAvailable(true);
                              try{
                                  serialPort.setSerialPortParams(115200,
                                          8,
                                          1,
                                          0);
                              }catch (UnsupportedCommOperationException e){
                              }
                          }catch (TooManyListenersException e){
                          }
                      }catch (IOException e){
                      }
                  }catch (IOException e){System.out.println("problem!");}
              }catch (PortInUseException e){e.printStackTrace();}
        }
    }

    @Override
    public void serialEvent(SerialPortEvent arg0){
        switch (arg0.getEventType()){
            case SerialPortEvent.BI:
            case SerialPortEvent.OE:
            case SerialPortEvent.CD:
            case SerialPortEvent.CTS:
            case SerialPortEvent.DSR:
            case SerialPortEvent.FE:
            case SerialPortEvent.RI:
            case SerialPortEvent.PE:
            case SerialPortEvent.OUTPUT_BUFFER_EMPTY:
                break;
            //read the data from the port
            case SerialPortEvent.DATA_AVAILABLE:
                {readBuffer = new byte[256];
                try{
                    int numByte = 0;
                    while(inputStream.available() > 0){
                        numByte = inputStream.read(readBuffer);
                    }
                    //System.out.println(new String(readBuffer));
                    readData += new String(readBuffer).trim();               
                }catch (IOException e){
                }
                try
				{
				    FileWriter fw = new FileWriter("log.txt",true); //the true will append the new data
				    fw.write(new String(readBuffer).trim());//appends the string to the file
				    fw.close();
				}
				catch(IOException ioe)
				{
				    System.err.println("IOException: " + ioe.getMessage());
				}
                break;}
        }
    }
    
    //	spinner_1;//channel
//	spinner_2;//address
//	spinner_3; //port
	private void send_write_command(int register, int[] value)
    {
        switch (combo_1.getSelectionIndex())
        {
            case 0: // I2C Protocol selected
                this.Write((this.spinner_3.getSelection()),
                    (1+(int)this.spinner_1.getSelection()),
                    this.spinner_2.getSelection(),
                    register, value);
                break;
            case 1: // SPI Protocol selected
                this.Write(this.slave_spinner.getSelection(),
                    register, value);
                break;
            default: // not a valid selection
            {}
//                throw new ApplicationException("Unknown protocol selected.");
        }
    }
	// Write via SPI
	public void Write(int SlaveAddress, int RegisterAddress, int[] Value) {
		String cmdString = "$spi_write c=" + SlaveAddress;
		cmdString += "; r=" + RegisterAddress + "; b=";
		for (int b : Value)
			cmdString += b + " ";
		cmdString += "; s=" + 0 + "\n";

		send(cmdString);
		//        readTest();
	}

	// Write via I2C
	public void Write(int HubPort, int Channel, int DeviceAddress, int[] RegisterAddress, int[] Value) {
		String cmdString = "$i2c_write p=" + HubPort;
		cmdString += "; c=" + Channel;
		cmdString += "; a=" + DeviceAddress;
		if (RegisterAddress.length == 1)
			cmdString += "; r=" + RegisterAddress[0];
		else if (RegisterAddress.length == 2)
			cmdString += "; r=" + (RegisterAddress[0] + 256 * RegisterAddress[1]);
		else {
		}
		cmdString += "; b=";
		for (int b : Value)
			cmdString += b + " ";

		if (RegisterAddress.length == 1)
			cmdString += "; s=0\n";
		else if (RegisterAddress.length == 2)
			cmdString += "; s=0\n";

		send(cmdString);
		//        readTest();
	}

	public void Write(int HubPort, int Channel, int DeviceAddress, int RegisterAddress, int[] Value) {
		this.Write(HubPort, Channel, DeviceAddress, new int[]{RegisterAddress}, Value);
	}
	
	//	spinner_1;//channel
	//	spinner_2;//address
	//	spinner_3; //port
	private int[] send_read_command(int register, int noBytes, boolean skipRead) {
		// if skipRead variable is set to true, the first read only triggers the reading and the second
		// read returns the value. This needs to be set to false for fifo readings after the first read.
		try {
			readData = "";
			switch (combo_1.getSelectionIndex()) {
				case 0 : // I2C Protocol selected
					if (skipRead)
						this.Read((byte) (this.spinner_3.getSelection()), (1 + this.spinner_1.getSelection()),
								this.spinner_2.getSelection(), register, noBytes);
					return this.Read((byte) (this.spinner_3.getSelection()), (1 + this.spinner_1.getSelection()),
							this.spinner_2.getSelection(), register, noBytes);
				case 1 : // SPI Protocol selected
					if (skipRead)
						this.Read(this.slave_spinner.getSelection(), register, noBytes);
					return this.Read(this.slave_spinner.getSelection(), register, noBytes);
				default : // not a valid selection
				{
				}
			}
		} catch (Exception ex) {
			//             MessageBox.Show("During runtime, some error occurred. For details see below:\n\n" + ex.Message, "An Error Occurred:", MessageBoxButtons.OK, MessageBoxIcon.Warning);
			return null;
		}
		return null;
	}

	//SPI read
	public int[] Read(int SlaveAddress, int RegisterAddress, int noBytes) throws Exception {
		String cmdString = "$spi_read c=" + SlaveAddress;
		cmdString += "; r=" + RegisterAddress;
		cmdString += "; l=" + noBytes;
		cmdString += "; s=" + "0" + "\n";

		this.send(cmdString);

		int[] payload = new int[noBytes];
		String result = readData;
		System.out.println(result + "ok");
		if (result.contains("NACK"))
		    throw new Exception("Read command answered with NACK\n\nWritten Command: " + cmdString );
		String[] byteResults = result.trim().replace("$","").split(";");
		if (byteResults.length != noBytes)
		    throw new Exception("Number of received bytes (" + byteResults.length +
		        ") does not match the expected number of bytes (" + noBytes + ")");
		for (int index = 0; index < noBytes; index++)
		{
		    if (!tryParseInt(byteResults[index]))
		        throw new Exception("Byte " + index + " in buffer cannot be interpreted as byte value. Byte contains: " + byteResults[index]+".\n\nWritten Command: " + cmdString);
		    else {
		    	payload[index] = Integer.parseInt(byteResults[index]);
		    }
		}
		return payload;
	}

	//I2C read
	public int[] Read(int HubPort, int Channel, int DeviceAddress, int[] RegisterAddress, int noBytes) throws Exception {
		String cmdString = "$i2c_read p=" + HubPort;
		cmdString += "; c=" + Channel;
		cmdString += "; a=" + DeviceAddress;
		if (RegisterAddress.length == 1)
			cmdString += "; r=" + RegisterAddress[0];
		else if (RegisterAddress.length == 2)
			cmdString += "; r=" + (RegisterAddress[0] + 256 * RegisterAddress[1]);
		else {
		}
		cmdString += "; l=" + noBytes;
		if (RegisterAddress.length == 1)
			cmdString += "; s=0\n";
		else if (RegisterAddress.length == 2)
			cmdString += "; s=0\n";

		this.send(cmdString);
		Thread.sleep(50);

		int[] payload = new int[noBytes];
		String result = readData;
		if (result.contains("NACK"))
		    throw new Exception("Read command answered with NACK\n\nWritten Command: " + cmdString );
		String[] byteResults = result.trim().replace("$","").split(";");
		if (byteResults.length != noBytes)
		    throw new Exception("Number of received bytes (" + byteResults.length +
		        ") does not match the expected number of bytes (" + noBytes + ")");
		for (int index = 0; index < noBytes; index++)
		{
		    if (!tryParseInt(byteResults[index]))
		        throw new Exception("Byte " + index + " in buffer cannot be interpreted as byte value. Byte contains: " + byteResults[index]+".\n\nWritten Command: " + cmdString);
		    else {
		    	payload[index] = Integer.parseInt(byteResults[index]);
		    }
		}
		return payload;
	}

	public int[] Read(int HubPort, int Channel, int DeviceAddress, int RegisterAddress, int noBytes) throws Exception {
		return this.Read(HubPort, Channel, DeviceAddress, new int[]{RegisterAddress}, noBytes);
	}
	
	boolean tryParseInt(String value) {  
	     try {  
	         Integer.parseInt(value);  
	         return true;  
	      } catch (NumberFormatException e) {  
	         return false;  
	      }  
	}
     «EXPAND ComponentReadInitialization FOR this.component»
     private void allSensorRead() {
		«EXPAND ComponentAllSensorRead FOR this.component»
	}
}

«ENDFILE»
«ENDDEFINE»

«DEFINE ComponentAllSensorRead FOR Component»
	«EXPAND RegMemAllSensorRead FOREACH this.regMemSet»
«ENDDEFINE»

«DEFINE RegMemAllSensorRead FOR RegMemSet»
	«EXPAND RegisterAllSensorRead FOREACH this.regMemElement»
«ENDDEFINE»

«DEFINE RegisterAllSensorRead FOR RegMemElement»
«ENDDEFINE»

«DEFINE RegisterAllSensorRead FOR Register»
	«FOREACH bitFieldElement AS bit»
		«bit.name»Read();
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE ComponentReadInitialization FOR Component»
	«EXPAND RegMemReadInitialization FOREACH this.regMemSet»
«ENDDEFINE»

«DEFINE RegMemReadInitialization FOR RegMemSet»
	«EXPAND RegisterReadInitialization FOREACH this.regMemElement»
«ENDDEFINE»

«DEFINE RegisterReadInitialization FOR RegMemElement»
«ENDDEFINE»

«DEFINE RegisterReadInitialization FOR Register»
	«EXPAND BitFieldReadInitialization FOREACH this.bitFieldElement»
«ENDDEFINE»

«DEFINE BitFieldReadInitialization FOR BitFieldElement»
«ENDDEFINE»

«DEFINE BitFieldReadInitialization FOR BitField»
«IF this.accessExternal.accessType.toString() == 'readwrite'»
	«IF this.width == "1"»
	private void «this.name»Read()
    {
         // Read current value of register
        int[] result = send_read_command(regOffset«this.name», 1, true);
        if (result == null)
            return;
        checkBox_«this.name».setSelection(result[0] != 0);
    }
	«ELSE»
	private void «this.name»Read()
    {
		 // Read current value of register
		int nobytes = (int) Math.ceil((regLength«this.name» / 8));
		int[] result = send_read_command(regOffset«this.name», nobytes, false);
		if (result == null)
			return;
		int value = 0;
		for(int i=nobytes-1; i>=0; i--) {
			value = value*256 + result[i];
		}
		numericUpDown_«this.name».setSelection(value);
    }
     «ENDIF»
«ENDIF»
«IF this.accessExternal.accessType.toString() == 'read'»
	private void «this.name»Read()
    {
		 // Read current value of register
		int nobytes = (int) Math.ceil((regLength«this.name» / 8));
		int[] result = send_read_command(regOffset«this.name», nobytes, false);
		if (result == null)
			return;
		int value = 0;
		for(int i=nobytes-1; i>=0; i--) {
			value = value*256 + result[i];
		}
		textBox_«this.name».setText(value + "");
    }
«ENDIF»
«ENDDEFINE»

«DEFINE ComponentInitialization FOR Component»
	«EXPAND RegMemInitialization FOREACH this.regMemSet»
«ENDDEFINE»

«DEFINE RegMemInitialization FOR RegMemSet»
	«EXPAND RegisterInitialization FOREACH this.regMemElement»
«ENDDEFINE»

«DEFINE RegisterInitialization FOR RegMemElement»
«ENDDEFINE»

«DEFINE RegisterInitialization FOR Register»
	«IF this.name != "ld5_ctrl" && this.name != "ld6_ctrl" && this.name != "ld7_ctrl"»
	groupbox_«this.name» = new Group(composite, SWT.NONE);
	groupbox_«this.name».setLayout(new FillLayout(SWT.VERTICAL));
	GridData gd_groupbox_«this.name» = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
	gd_groupbox_«this.name».widthHint = 200;
	groupbox_«this.name».setLayoutData(gd_groupbox_«this.name»);
	groupbox_«this.name».setText("«this.name»");
	groupboxTmp = groupbox_«this.name»;
	«FOREACH this.bitFieldElement AS bit»
	regLength«bit.name» = «this.dataWidth»;
	regOffset«bit.name» = «this.offset»;	
	«ENDFOREACH»
	«ENDIF»
	«EXPAND BitFieldInitialization FOREACH this.bitFieldElement»
«ENDDEFINE»

«DEFINE BitFieldInitialization FOR BitFieldElement»
«ENDDEFINE»

«DEFINE BitFieldInitialization FOR BitField»
«IF this.accessExternal.accessType.toString() == 'readwrite'»
	«IF this.width == "1"»
	«IF this.name == "ld5_ctrl"»
	checkBox_«this.name» = new Button(groupbox_ld4_ctrl, SWT.CHECK);
	«ELSEIF this.name == "ld6_ctrl"»
	checkBox_«this.name» = new Button(groupbox_ld4_ctrl, SWT.CHECK);
	«ELSEIF this.name == "ld7_ctrl"»
	checkBox_«this.name» = new Button(groupbox_ld4_ctrl, SWT.CHECK);
	«ELSE»
	checkBox_«this.name» = new Button(groupboxTmp, SWT.CHECK);
	«ENDIF»
	checkBox_«this.name».setText("«this.name»");
	checkBox_«this.name».addSelectionListener(new SelectionAdapter() {
		@Override
		public void widgetSelected(SelectionEvent arg0) {
			send_write_command(regOffset«this.name», new int[] { (checkBox_«this.name».getSelection() ? 1 : 0)  });
		}
	});
	«ELSE»
	Composite groupTmp«this.name» = new Composite(groupboxTmp, SWT.NONE);
	groupTmp«this.name».setLayout(new FlowLayout(SWT.HORIZONTAL | SWT.LEFT));
	label_«this.name» = new Label(groupTmp«this.name», SWT.NONE);
	label_«this.name».setText("«this.name»");
	numericUpDown_«this.name» = new Spinner(groupTmp«this.name», SWT.BORDER);
	numericUpDown_«this.name».setMaximum((int)Math.pow(2, regLength«this.name») - 1);
	
	numericUpDown_«this.name».addMouseListener(new MouseAdapter() {
			@Override
			public void mouseDown(MouseEvent arg0) {
		        int nobytes = (int)Math.ceil((regLength«this.name» / 8));
		        int[] valueAsByteArray = new int[nobytes];
		        int value = (int)numericUpDown_«this.name».getSelection();
		        for (int index = 0; index< nobytes; index++)
		        {
		            valueAsByteArray[index] = (value % 256);
		            value =  ((value-valueAsByteArray[index]) / 256);
		        }
		        send_write_command(regOffset«this.name», valueAsByteArray);
			}
		});
		numericUpDown_«this.name».addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent arg0) {
				if(arg0.character == SWT.CR  || arg0.character == SWT.LF) {
			        int nobytes = (int)Math.ceil((regLength«this.name» / 8));
			        int[] valueAsByteArray = new int[nobytes];
			        int value = (int)numericUpDown_«this.name».getSelection();
			        for (int index = 0; index< nobytes; index++)
			        {
			            valueAsByteArray[index] = (value % 256);
			            value =  ((value-valueAsByteArray[index]) / 256);
			        }
			        send_write_command(regOffset«this.name», valueAsByteArray);
				}
			}
		});
     «ENDIF»
«ENDIF»
«IF this.accessExternal.accessType.toString() == 'read'»
	Composite groupTmp«this.name» = new Composite(groupboxTmp, SWT.NONE);
	groupTmp«this.name».setLayout(new FlowLayout(SWT.HORIZONTAL | SWT.LEFT));
	label_«this.name» = new Label(groupTmp«this.name», SWT.NONE);
	label_«this.name».setText("«this.name»");
	textBox_«this.name» = new Text(groupTmp«this.name», SWT.BORDER);
	textBox_«this.name».setText("---");
	textBox_«this.name».addMouseListener(new MouseAdapter() {
		@Override
		public void mouseDown(MouseEvent arg0) {
			int nobytes = (int) Math.ceil((regLength«this.name» / 8));
			int[] result = send_read_command(regOffset«this.name», nobytes, false);
			if (result == null)
				return;
			int value = 0;
			for(int i=nobytes-1; i>=0; i--) {
				value = value*256 + result[i];
			}
			textBox_«this.name».setText(value + "");
		}
	});
«ENDIF»
«ENDDEFINE»

«DEFINE ComponentControlsInitialization FOR Component»
	«EXPAND RegMemControlsInitialization FOREACH this.regMemSet»
«ENDDEFINE»

«DEFINE RegMemControlsInitialization FOR RegMemSet»
	«EXPAND RegisterControlsInitialization FOREACH this.regMemElement»
«ENDDEFINE»

«DEFINE RegisterControlsInitialization FOR RegMemElement»
«ENDDEFINE»

«DEFINE RegisterControlsInitialization FOR Register»
	private Group groupbox_«this.name»;
	«FOREACH this.bitFieldElement AS bit»
	private	int regLength«bit.name» = «this.dataWidth»;
	private int regOffset«bit.name» = «this.offset»;	
	«ENDFOREACH»
	«EXPAND BitFieldControlsInitialization FOREACH this.bitFieldElement»
«ENDDEFINE»

«DEFINE BitFieldControlsInitialization FOR BitFieldElement»
«ENDDEFINE»

«DEFINE BitFieldControlsInitialization FOR BitField»
«IF this.accessExternal.accessType.toString() == 'readwrite'»
	«IF this.width == "1"»
	private Button checkBox_«this.name»;
	«ELSE»
	private Label label_«this.name»;
	private Spinner numericUpDown_«this.name»;
     «ENDIF»
«ENDIF»
«IF this.accessExternal.accessType.toString() == 'read'»
	private Label label_«this.name»;
	private Text textBox_«this.name»;
«ENDIF»
«ENDDEFINE»




